{"version":3,"file":"static/js/278.de22b3ba.chunk.js","mappings":"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","sources":["webpack://project/./src/Pages/Chat/Chat.module.css?b2a0","Pages/Chat/Chat.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Chat_messages__efd-3\"};","import React, { useEffect, useRef, useState } from 'react';\nimport s from './Chat.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  sendNewMessage,\n  startListeningNewMessages,\n  stopListeningNewMessages,\n} from '../../redux/chatReducer';\nimport { AppDispatch, AppStateType } from '../../redux/reduxStore';\nimport { NavLink, Navigate } from 'react-router-dom';\nimport { Button, Input, Space } from 'antd';\nimport { getisAuth } from '../../redux/authSelector';\nconst defaultUser = require('../../assets/images/defautltUser.png');\n// /*\n// let wsChannel = new WebSocket(\n//   'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx',\n// );\n// wsChannel.onmessage = (e) => {\n//   console.log(e);\n// };\n// */\n\nexport type ChatType = {\n  message: string;\n  photo: string | null;\n  userId: number;\n  userName: string;\n};\n\nconst ChatPage: React.FC = () => {\n  let dispatch: AppDispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(startListeningNewMessages());\n    return () => {\n      dispatch(stopListeningNewMessages());\n    };\n  }, [dispatch]);\n\n  const isAuth = useSelector(getisAuth);\n  if (!isAuth) return <Navigate to={'/login'} />;\n  return (\n    <>\n      <Messages />\n      <AddMessageForm />\n    </>\n  );\n};\n///////////////////////// AddMessageForm //////////////////////////\nconst AddMessageForm: React.FC = () => {\n  let [message, setMessage] = useState('');\n  // let [ready, setReady] = useState<'pending' | 'ready'>('pending');\n\n  let dispatch: AppDispatch = useDispatch();\n\n  let status = useSelector((state: AppStateType) => state.chat.status);\n\n  let sendMessageHandler = () => {\n    if (!message) {\n      return;\n    }\n    dispatch(sendNewMessage(message));\n    setMessage('');\n  };\n\n  return (\n    <>\n      {/* <textarea\n        name=\"chatArea\"\n        id=\"t\"\n        cols={30}\n        rows={2}\n        value={message}\n        onChange={(e) => setMessage(e.currentTarget.value)}\n      ></textarea>\n      <button\n        disabled={status === 'pending' || !navigator.onLine}\n        onClick={sendMessageHandler}\n      >\n        Отправить\n      </button> */}\n      <div style={{ maxWidth: '700px' }}>\n        <Space.Compact\n          style={{ width: '100%', padding: '8px 8px 8px 0 ', margin: '4px' }}\n        >\n          <Input\n            defaultValue=\"\"\n            value={message}\n            onChange={(e) => setMessage(e.currentTarget.value)}\n          />\n          <Button\n            type=\"primary\"\n            disabled={status === 'pending' || !navigator.onLine}\n            onClick={sendMessageHandler}\n          >\n            ОТПРАВИТЬ\n          </Button>\n        </Space.Compact>\n      </div>\n    </>\n  );\n};\n////////////////////////// MessageS //////////////////////////////////\nconst Messages: React.FC = () => {\n  // TODO: Remove useEffect and useState\n  let messages = useSelector((state: AppStateType) => state.chat.messages);\n\n  let lastDiv = useRef<HTMLDivElement>(null);\n\n  let [isAutoScroll, setIsAutoScroll] = useState<boolean>(true);\n\n  let scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    let element = e.currentTarget;\n\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight,\n      ) < 300\n    ) {\n      setIsAutoScroll(true);\n    } else {\n      setIsAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      lastDiv.current?.scrollIntoView({ behavior: 'auto' });\n    }\n  }, [messages, isAutoScroll]);\n\n  // let [a, setA] = useState<number>(10);\n\n  // let aHandler = () => {\n  //   setA((a) => a + 1);\n  //   setA((a) => a + 1);\n  // };\n\n  return (\n    <div\n      style={{ overflow: 'auto', maxHeight: '700px', maxWidth: '700px' }}\n      onScroll={scrollHandler}\n      className={s.messages}\n    >\n      {/* <div onClick={aHandler} style={{ fontSize: '30px' }}>\n        {a}\n      </div> */}\n      {messages.map((m, i) => (\n        <Message key={i} message={m} />\n      ))}\n      <div ref={lastDiv}></div>\n    </div>\n  );\n};\n/////////////////////////////// Message /////////////////////////////////////////////////\nconst Message: React.FC<{ message: ChatType }> = React.memo(({ message }) => {\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          color: 'aliceblue',\n          background: '#212121',\n          padding: '8px',\n          margin: '4px',\n          borderRadius: '16px',\n        }}\n      >\n        <div>\n          <NavLink to={'/profile/' + message.userId}>\n            <img\n              src={message.photo || defaultUser}\n              style={{ borderRadius: '50%' }}\n              alt=\"avatar\"\n              height=\"50px\"\n              width=\"50px\"\n            />\n          </NavLink>\n        </div>\n\n        <div\n          style={{\n            alignSelf: 'center',\n            marginLeft: '10px',\n            fontFamily: 'Montserrat',\n          }}\n        >\n          {message.message}\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default ChatPage;\n"],"names":["defaultUser","require","AddMessageForm","_useState","useState","_useState2","_slicedToArray","message","setMessage","dispatch","useDispatch","status","useSelector","state","chat","_jsx","_Fragment","children","style","maxWidth","_jsxs","Space","Compact","width","padding","margin","Input","defaultValue","value","onChange","e","currentTarget","Button","type","disabled","navigator","onLine","onClick","sendNewMessage","Messages","messages","lastDiv","useRef","_useState3","_useState4","isAutoScroll","setIsAutoScroll","useEffect","_lastDiv$current","current","scrollIntoView","behavior","overflow","maxHeight","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","className","s","map","m","i","Message","ref","React","_ref","display","flexDirection","color","background","borderRadius","NavLink","to","userId","src","photo","alt","height","alignSelf","marginLeft","fontFamily","startListeningNewMessages","stopListeningNewMessages","getisAuth","Navigate"],"sourceRoot":""}